// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
  IN  
      x[16], y[16],  // 16-bit inputs        
      zx, // zero the x input?
      nx, // negate the x input?
      zy, // zero the y input?
      ny, // negate the y input?
      f,  // compute (out = x + y) or (out = x & y)?
      no; // negate the out output?
  OUT 
      out[16], // 16-bit output
      zr,      // if (out == 0) equals 1, else 0
      ng;      // if (out < 0)  equals 1, else 0

  PARTS:
    Not16(in=x, out=notx);
    Mux4Way16(
      a=x, 
      b[0..15]=false, 
      c=notx, 
      d[0..15]=true, 
      sel[0]=zx,
      sel[1]=nx, 
      out=operandx 
    );

    Not16(in=y, out=noty);
    Mux4Way16(
      a=y, 
      b[0..15]=false, 
      c=noty, 
      d[0..15]=true, 
      sel[0]=zy,
      sel[1]=ny, 
      out=operandy
    );

    Add16(a=operandx, b=operandy, out=addition);
    And16(a=operandx, b=operandy, out=conjunction);
    Not16(in=conjunction, out=invconjunction);
    Not16(in=addition, out=invaddition);
    
    Mux4Way16(
      a=conjunction, 
      b=addition, 
      c=invconjunction, 
      d=invaddition,
      sel[0]=f,
      sel[1]=no, 
      out=out,
      out[0..7]=outlsb,
      out[8..15]=outmsb,
      out[15]=ng
    );

    Or8Way(in=outlsb, out=zrlsb);
    Or8Way(in=outmsb, out=zrmsb);
    Or(a=zrlsb, b=zrmsb, out=nzr);
    Not(in=nzr, out=zr);
}
    